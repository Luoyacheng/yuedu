name: Sync Legado Pre-release APKs

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时检查一次
  workflow_dispatch:

jobs:
  sync-prerelease-apks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest pre-release from legado
        id: legado
        uses: actions/github-script@v6
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: 'gedoor',
              repo: 'legado'
            });
            const preRelease = releases.data.find(release => release.prerelease);
            if (!preRelease) {
              core.setFailed('No pre-release found');
              return;
            }
            core.setOutput('version', preRelease.tag_name);
            core.setOutput('assets', JSON.stringify(preRelease.assets));
            core.setOutput('published_at', preRelease.published_at);
            core.setOutput('name', preRelease.name);

      - name: Setup download directory
        run: |
          mkdir -p apks
          echo '${{ steps.legado.outputs.version }}' > apks/current_version.txt
          echo '${{ steps.legado.outputs.published_at }}' > apks/last_update.txt

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download APKs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          assets=$(echo '${{ steps.legado.outputs.assets }}' | jq -r '.[] | select(.name | endswith(".apk")) | .url')
          if [ -z "$assets" ]; then
            echo "No APK assets found!"
            exit 1
          fi
          for url in $assets; do
            name=$(echo "$url" | awk -F'/' '{print $NF}')
            echo "Downloading $name ..."
            curl -L -H "Accept: application/octet-stream" -H "Authorization: token $GH_TOKEN" "$url" -o "apks/$name"
            if [ ! -s "apks/$name" ]; then
              echo "Download failed or file is empty: $name"
              exit 1
            fi
          done

      - name: Create version info
        run: |
          echo "# Legado Pre-release APKs" > apks/README.md
          echo "Last updated: ${{ steps.legado.outputs.published_at }}" >> apks/README.md
          echo "Version: ${{ steps.legado.outputs.version }}" >> apks/README.md
          echo "Release name: ${{ steps.legado.outputs.name }}" >> apks/README.md
          echo "## Files:" >> apks/README.md
          ls -l apks/*.apk >> apks/README.md

      - name: Commit and push if there are changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add apks/
          git commit -m "Update Legado Pre-release APKs to ${{ steps.legado.outputs.version }}" || exit 0
          git push
